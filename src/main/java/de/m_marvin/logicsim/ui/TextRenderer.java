package de.m_marvin.logicsim.ui;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import org.eclipse.swt.internal.opengl.win32.WGL;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL33;

public class TextRenderer {
	
	public static final int CHARACTER_SIZE = 32;
	public static final int ASCII_MAP_SIZE = 16;
	public static final int ASCII_TEXTURE_WIDTH = ASCII_MAP_SIZE * CHARACTER_SIZE;
	public static final int ASCII_TEXTURE_HEIGHT = (CHARACTER_SIZE + 1) * ASCII_MAP_SIZE;
	
	public static final String ASCII_MAP_SIZED_CONSOLAS = "";
	
	private static Map<Long, Boolean> initialized = new HashMap<>();
	private static Map<Long, Integer> lastActiveTexture = new HashMap<>();
	private static Map<Long, Integer> activeGPUTexture = new HashMap<>();
	private static BufferedImage activeAsciiMap;
	private static Map<Character, Integer> character2size = new HashMap<>();
	
	// Init default ascii map
	static {
		try {
			loadAsciiMap(ASCII_MAP_SIZED_CONSOLAS);
		} catch (IOException e) {
			System.err.println("Failed to initialise TextRenderer!");
			e.printStackTrace();
		}
	}
	
	/*
	 * Gets the start of the character (from the left) and the end in pixels
	 */
	private static byte[] getCharacterStartEnd(char character) {
		Integer size = character2size.get(character);
		if (size != null) {
			byte startPix = (byte) (size >> 8);
			byte endPix = (byte) (size & 0xFF);
			return new byte[] {startPix, endPix};
		}
		return new byte[] {0, CHARACTER_SIZE};
	}

	/*
	 * Replaces the current ascii-map with the given one (base 64 encoded) to change the font
	 */
	public static void loadAsciiMap(String asciiMapB64) throws IOException {
		activeAsciiMap = ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(asciiMapB64)));
		character2size.clear();
		
		if (activeAsciiMap.getWidth() != ASCII_TEXTURE_WIDTH || activeAsciiMap.getHeight() != ASCII_TEXTURE_HEIGHT)
			throw new IllegalArgumentException("The ascii-map texture does not match the expected size of " + ASCII_TEXTURE_WIDTH + "x" + ASCII_TEXTURE_HEIGHT + "!");
		
		// Parse character size line from ascii map
		char character = 0;
		for (int x = 0; x < ASCII_MAP_SIZE; x++) {
			for (int y = 0; y < ASCII_MAP_SIZE; y++) {
				
				int[] sizeLinePixels = activeAsciiMap.getRGB(x * CHARACTER_SIZE, y * (CHARACTER_SIZE + 1) + CHARACTER_SIZE, CHARACTER_SIZE, 1, null, 0, CHARACTER_SIZE);
				
				byte startPix = 0;
				for (; startPix < CHARACTER_SIZE; startPix++) if (sizeLinePixels[startPix] == -1) break;
				byte endPix = startPix;
				for (; endPix < CHARACTER_SIZE; endPix++) if (sizeLinePixels[endPix] != -1) break;
				endPix--;
				
				int size = ((startPix << 8) | endPix);
				
				character2size.put(character, size);
				character++;
				
			}
		}
	}
	
	/*
	 * Returns the current encoded ascii-map
	 */
	public static BufferedImage getActiveAsciiMap() {
		return activeAsciiMap;
	}
	
	/*
	 * Returns an long value to identify the current gl context
	 */
	public static long getContextId() {
		return WGL.wglGetCurrentContext();
	}
	
	/*
	 * Initializes and updates the OpenGL-states
	 */
	private static void updateOpenGL() {
		long contextId = getContextId();
		if (!initialized.getOrDefault(contextId, false)) {
			activeGPUTexture.put(contextId, GL11.glGenTextures());
			GL11.glEnable(GL11.GL_TEXTURE_2D);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D, activeGPUTexture.get(contextId));
			GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
			GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
			initialized.put(contextId, true);
		}
		if (lastActiveTexture.getOrDefault(contextId, 0) != activeAsciiMap.hashCode()) {
			GL11.glBindTexture(GL11.GL_TEXTURE_2D, activeGPUTexture.get(contextId));
			int[] pixels = activeAsciiMap.getRGB(0, 0, activeAsciiMap.getWidth(), activeAsciiMap.getHeight(), null, 0, activeAsciiMap.getWidth());
			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA8, activeAsciiMap.getWidth(), activeAsciiMap.getHeight(), 0,  GL33.GL_BGRA, GL33.GL_UNSIGNED_INT_8_8_8_8_REV, pixels);
			lastActiveTexture.put(contextId, activeAsciiMap.hashCode());
		}
	}
	
	/*
	 * Cleans up all used OpenGL GPU resources
	 */
	public static void cleanUpOpenGL() {
		long contextId = getContextId();
		if (activeGPUTexture.containsKey(contextId)) GL11.glDeleteTextures(activeGPUTexture.get(contextId));
	}
	
	/*
	 * Draws a single character using the currently bound texture
	 */
	private static float drawCharacter(float x, float y, float size, char character, boolean resized) {
		
		byte[] startEndPixels = resized ? getCharacterStartEnd(character) : new byte[] {0, 32};
		
		float cx1 = (character >> 4) / (float) 16;
		float cy1 = (character & 0xF) / (float) 16;
		float cx2 = cx1 + (CHARACTER_SIZE / (float) ASCII_TEXTURE_WIDTH);
		float cy2 = cy1 + ((CHARACTER_SIZE) / (float) ASCII_TEXTURE_HEIGHT);
		
		float offsetLeft = (startEndPixels[0] / (float) CHARACTER_SIZE) * size;
		
		GL11.glTexCoord2f(cx1, cy1);
		GL11.glVertex2f(x - offsetLeft, y);
		GL11.glTexCoord2f(cx2, cy1);
		GL11.glVertex2f(x - offsetLeft + size, y);
		GL11.glTexCoord2f(cx2, cy2);
		GL11.glVertex2f(x - offsetLeft + size, y + size);
		GL11.glTexCoord2f(cx1, cy2);
		GL11.glVertex2f(x - offsetLeft, y + size);
		
		return ((startEndPixels[1] - startEndPixels[0] + 1) / (float) CHARACTER_SIZE) * size;
		
	}
	
	/*
	 * Gets the width of the character in pixels
	 */
	public static int getCharacterWidth(char character, boolean resized) {
		byte[] startEndPixels = resized ? getCharacterStartEnd(character) : new byte[] {0, 32};
		return startEndPixels[1] - startEndPixels[0] + 1;
	}
	
	/*
	 * Gets the width of the text in pixels
	 */
	public static int getTextWidth(String text, boolean resized) {
		int width = 0;
		for (int i = 0; i < text.length(); i++) width += getCharacterWidth(text.charAt(i), resized);
		return width;
	}
	
	/*
	 * Draws an text with the current ascii-map
	 */
	public static void drawText(float x, float y, float size, String text, boolean resized, boolean centered) {
		
		if (centered) {
			float width = (getTextWidth(text, resized) / (float) CHARACTER_SIZE) * size;
			x = x - width / 2;
			y = y - size / 2;
		}
		
		updateOpenGL();
		
		GL11.glPushMatrix();
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 1);
		GL11.glBegin(GL11.GL_QUADS);
		
		float offset = 0;
		for (int i = 0; i < text.length(); i++) {
			offset += drawCharacter(x + offset, y, size, text.charAt(i), resized);
		}
		
		GL11.glEnd();
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
		GL11.glPopMatrix();
		
	}
	
	/*
	 * Draws an text with the current ascii-map
	 */
	public static void drawText(float x, float y, float size, String text, boolean centered) {
		drawText(x, y, size, text, true, centered);
	}

	/*
	 * Draws an text with the current ascii-map
	 */
	public static void drawText(float x, float y, float size, String text) {
		drawText(x, y, size, text, true, true);
	}
	
}
